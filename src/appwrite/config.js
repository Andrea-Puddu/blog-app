import conf from '../conf/conf';
import {Client, Databases, Storage, Query, ID} from 'appwrite';

export class Service {
  client = new Client();
  databases;
  storage;

  constructor() {
    this.client.setEndpoint(conf.appwriteUrl).setProject(conf.appwriteProjectId);
    this.databases = new Databases(this.client);
    this.storage = new Storage(this.client);
  }

  // DATABASE
  // get a single blog post based on $id (slung/string with dashes instead of spaces, generated by title string)
  async getPost(slug) {
    try {
      return await this.databases.getDocument(
        conf.appwriteDatabaseId,
        conf.appwriteCollectionId,
        slug
      );
    } catch (error) {
      console.error('Appwrite service :: getPost() ::', error);
      return false;
    }
  }

  // get all posts which have an active status
  async getPosts(queries = [Query.equal('status', 'active')]) {
    try {
      return await this.databases.listDocuments(
        conf.appwriteDatabaseId,
        conf.appwriteCollectionId,
        queries
      );
    } catch (error) {
      console.error('Appwrite service :: getPosts() ::', error);
      return false;
    }
  }

  // create a post object
  async createPost({title, slug, content, featuredImage, status, userId}) {
    try {
      return await this.databases.createDocument(
        conf.appwriteDatabaseId,
        conf.appwriteCollectionId,
        slug,
        {title, content, featuredImage, status, userId}
      );
    } catch (error) {
      console.error('Appwrite service :: createPost() ::', error);
      return false;
    }
  }

  // update a post based on id and property that you need to update
  async updatePost(slug, {title, content, featuredImage, status}) {
    try {
      return await this.databases.updateDocument(
        conf.appwriteDatabaseId,
        conf.appwriteCollectionId,
        slug,
        {title, content, featuredImage, status}
      );
    } catch (error) {
      console.error('Appwrite service :: updatePost() ::', error);
      return false;
    }
  }

  // delete post based on id
  async deletePost(slug) {
    try {
      await this.databases.deleteDocument(conf.appwriteDatabaseId, conf.appwriteCollectionId, slug);
      return true;
    } catch (error) {
      console.error('Appwrite service :: deletePost() ::', error);
      return false;
    }
  }

  // STORAGE
  // upload a file - <input type="file" id="uploader">
  async uploadFile(file) {
    try {
      return await this.storage.createFile(
        conf.appwriteBucketId,
        ID.unique(),
        // document.getElementById('uploader').files[0]
        file
      );
    } catch (error) {
      console.error('Appwrite service :: uploadFile() ::', error);
      return false;
    }
  }

  // delete file based on file id
  async deleteFile(fileId) {
    try {
      await this.storage.deleteFile(conf.appwriteBucketId, fileId);
      return true;
    } catch (error) {
      console.error('Appwrite service :: deleteFile() ::', error);
      return false;
    }
  }

  // get file preview
  getFilePreview(fileId) {
    return this.storage.getFilePreview(conf.appwriteBucketId, fileId).href;
  }
}

const service = new Service();
export default service;
